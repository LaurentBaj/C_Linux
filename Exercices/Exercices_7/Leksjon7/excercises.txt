mToday's exercises are going to be more experimental than strict tasks. But be
careful not to install any libraries into your default directories. You might
end up screwing things badly!

Exercise 1:

Write a function, that can print how many times it has been called so far
without using a global variable

Exercise 2:

Take your bubble sort and binary search code, make them into functions. Then
provide interfaces to them using header files. Compile them into a static library
Then rewrite your main program so that you simply include the header and use the
functions but not the source of the implementaton. Instead you should link with
the library.

Exercise 3:

Assume the linked list struct

typedef struct _LIST {
   struct _LIST *pNext;
   int iSze
   char cBuf[1];
} LIST;

The buffer cBuf is a placeholder for any kind and size of data, and can be used
to hold a string as:

   char szStr[] = "This is a long string.";
   LIST *pThis = malloc (sizeof(LIST)+strlen(szStr));
   strcpy (pThis->cBuf, szStr);

How would you write code that uses cBuf[] to "hold" an array of 100 longs?

Make a set of functions to manipulate linked lists of this kind and implement the
following:

- Insert in head of list.
- Add to end of list.
- Remove list element.

Write a header file and the necessary code. Make everything into a a static library.
Then write a small test-program that tests the functionality of your library.

Exercise 4:

Consider the following header : myalloc.h
===================================================================================
/* Multi-type memory allocation and initialization function.
	void *myalloc(const char *, ...);

	first argument accepts a string that has type and initialization flag.
	accepted types:
		char
		int
		float
	accepted flags:
		T or F

	second argument is the number of elements that need to be allocated.
	<if initialization flag is true>third argument - initialization value.

	returns a void * pointer.

	Example  Usage:
		int *p;
		p = (int *)myalloc("int T",100,4);
		//Gives you an array with 100 ints and all are 4

		float *p;
		p = (float *)myalloc("float F",200);
		//Gives you a float array with 200 floats unintialized

======================================================================================
Now assume you are an open source contributor and you are assigned to implement this.
How would you do this?

// An example on variable number of arguments:

#include <stdio.h>
#include <stdarg.h>

void simple_printf(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);

    while (*fmt != '\0') {
        if (*fmt == 'd') {
            int i = va_arg(args, int);
            printf("%d\n", i);
        } else if (*fmt == 'c') {
            // note automatic conversion to integral type
            int c = va_arg(args, int);
            printf("%c\n", c);
        } else if (*fmt == 'f') {
            double d = va_arg(args, double);
            printf("%f\n", d);
        }
        ++fmt;
    }

    va_end(args);
}

int main(void)
{
    simple_printf("dcff", 3, 'a', 1.999, 42.5);
}

Source: http://en.cppreference.com/w/c/variadic



